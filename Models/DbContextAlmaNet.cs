// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DRR.Core.DBAlmaNET.Models
{
    public partial class DbContextAlmaNet : DbContext
    {
        public DbContextAlmaNet()
        {
        }

        public DbContextAlmaNet(DbContextOptions<DbContextAlmaNet> options)
            : base(options)
        {
        }

        public virtual DbSet<AccesoAutorizacion> AccesoAutorizacion { get; set; }
        public virtual DbSet<AccesoEspecial> AccesoEspecial { get; set; }
        public virtual DbSet<AplicacionLicencia> AplicacionLicencia { get; set; }
        public virtual DbSet<AplicacionLicenciaActividad> AplicacionLicenciaActividad { get; set; }
        public virtual DbSet<AplicacionLicenciaModulo> AplicacionLicenciaModulo { get; set; }
        public virtual DbSet<AplicacionModulo> AplicacionModulo { get; set; }
        public virtual DbSet<ArchivoModelo> ArchivoModelo { get; set; }
        public virtual DbSet<Banco> Banco { get; set; }
        public virtual DbSet<BancoSucursal> BancoSucursal { get; set; }
        public virtual DbSet<BilletesDesglose> BilletesDesglose { get; set; }
        public virtual DbSet<BuscarConfiguracion> BuscarConfiguracion { get; set; }
        public virtual DbSet<ComercioTipo> ComercioTipo { get; set; }
        public virtual DbSet<ComprobanteTipo> ComprobanteTipo { get; set; }
        public virtual DbSet<ComprobanteTipoOperacionTipo> ComprobanteTipoOperacionTipo { get; set; }
        public virtual DbSet<ConfiguracionNet> ConfiguracionNet { get; set; }
        public virtual DbSet<ContabilidadIndiceAjusteInflacion> ContabilidadIndiceAjusteInflacion { get; set; }
        public virtual DbSet<CultureInfo> CultureInfo { get; set; }
        public virtual DbSet<DomicilioTipo> DomicilioTipo { get; set; }
        public virtual DbSet<EmailTipo> EmailTipo { get; set; }
        public virtual DbSet<EmpaqueTipo> EmpaqueTipo { get; set; }
        public virtual DbSet<EmpleadoTipo> EmpleadoTipo { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<EmpresaTipo> EmpresaTipo { get; set; }
        public virtual DbSet<EmpresaUsuario> EmpresaUsuario { get; set; }
        public virtual DbSet<EntidadGrupoSangineoTipo> EntidadGrupoSangineoTipo { get; set; }
        public virtual DbSet<EntidadSucursalTipo> EntidadSucursalTipo { get; set; }
        public virtual DbSet<EntidadTipo> EntidadTipo { get; set; }
        public virtual DbSet<EquipoEmpresa> EquipoEmpresa { get; set; }
        public virtual DbSet<ErrorMessage> ErrorMessage { get; set; }
        public virtual DbSet<EstadoCivilTipo> EstadoCivilTipo { get; set; }
        public virtual DbSet<Form> Form { get; set; }
        public virtual DbSet<FormCampos> FormCampos { get; set; }
        public virtual DbSet<IdentificacionTipo> IdentificacionTipo { get; set; }
        public virtual DbSet<Impuesto> Impuesto { get; set; }
        public virtual DbSet<ImpuestoBaseImponible> ImpuestoBaseImponible { get; set; }
        public virtual DbSet<ImpuestoCategoria> ImpuestoCategoria { get; set; }
        public virtual DbSet<ImpuestoCodigoActividad> ImpuestoCodigoActividad { get; set; }
        public virtual DbSet<ImpuestoDesglose> ImpuestoDesglose { get; set; }
        public virtual DbSet<ImpuestoEmisionComprobante> ImpuestoEmisionComprobante { get; set; }
        public virtual DbSet<ImpuestoPorCodigoActividadComprador> ImpuestoPorCodigoActividadComprador { get; set; }
        public virtual DbSet<ImpuestoPorCodigoActividadVendedor> ImpuestoPorCodigoActividadVendedor { get; set; }
        public virtual DbSet<ImpuestoPorEmisionComprobante> ImpuestoPorEmisionComprobante { get; set; }
        public virtual DbSet<ImpuestoPorZonaComprador> ImpuestoPorZonaComprador { get; set; }
        public virtual DbSet<ImpuestoPorZonaCompradorCategoria> ImpuestoPorZonaCompradorCategoria { get; set; }
        public virtual DbSet<ImpuestoPorZonaVendedor> ImpuestoPorZonaVendedor { get; set; }
        public virtual DbSet<ImpuestoPorZonaVendedorCategoria> ImpuestoPorZonaVendedorCategoria { get; set; }
        public virtual DbSet<ImpuestoZona> ImpuestoZona { get; set; }
        public virtual DbSet<InasistenciaTipo> InasistenciaTipo { get; set; }
        public virtual DbSet<InstitucionBeneficencia> InstitucionBeneficencia { get; set; }
        public virtual DbSet<Licencia> Licencia { get; set; }
        public virtual DbSet<LicenciaIndiceTabla> LicenciaIndiceTabla { get; set; }
        public virtual DbSet<Login> Login { get; set; }
        public virtual DbSet<LoginPermiso> LoginPermiso { get; set; }
        public virtual DbSet<MercadoPagoCuenta> MercadoPagoCuenta { get; set; }
        public virtual DbSet<MonedaTipo> MonedaTipo { get; set; }
        public virtual DbSet<Moroso> Moroso { get; set; }
        public virtual DbSet<MuestreoVenta> MuestreoVenta { get; set; }
        public virtual DbSet<NoticiaCanal> NoticiaCanal { get; set; }
        public virtual DbSet<NoticiaCanalTipo> NoticiaCanalTipo { get; set; }
        public virtual DbSet<NoticiaTipo> NoticiaTipo { get; set; }
        public virtual DbSet<OperacionDebitoCreditoTipo> OperacionDebitoCreditoTipo { get; set; }
        public virtual DbSet<OperacionTipo> OperacionTipo { get; set; }
        public virtual DbSet<OrdenServicioMantenimientoTipo> OrdenServicioMantenimientoTipo { get; set; }
        public virtual DbSet<PadronAfip> PadronAfip { get; set; }
        public virtual DbSet<PagoRegistroTipo> PagoRegistroTipo { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<PaisCuit> PaisCuit { get; set; }
        public virtual DbSet<PaisProvinciaEstado> PaisProvinciaEstado { get; set; }
        public virtual DbSet<PaisProvinciaEstadoCiudad> PaisProvinciaEstadoCiudad { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<Permiso> Permiso { get; set; }
        public virtual DbSet<PermisoAccesoEspecial> PermisoAccesoEspecial { get; set; }
        public virtual DbSet<PermisoForm> PermisoForm { get; set; }
        public virtual DbSet<PermisoFormCampos> PermisoFormCampos { get; set; }
        public virtual DbSet<PermisoReporte> PermisoReporte { get; set; }
        public virtual DbSet<PermisoTable> PermisoTable { get; set; }
        public virtual DbSet<PermisoWebForm> PermisoWebForm { get; set; }
        public virtual DbSet<PermisosGenericos> PermisosGenericos { get; set; }
        public virtual DbSet<PlanDeCuentasCentroCostoTipo> PlanDeCuentasCentroCostoTipo { get; set; }
        public virtual DbSet<ProductoNroSerieDetalleTipoCalculos> ProductoNroSerieDetalleTipoCalculos { get; set; }
        public virtual DbSet<ProductoTipo> ProductoTipo { get; set; }
        public virtual DbSet<Reporte> Reporte { get; set; }
        public virtual DbSet<ReporteModificado> ReporteModificado { get; set; }
        public virtual DbSet<SeguroPolizaTipo> SeguroPolizaTipo { get; set; }
        public virtual DbSet<TableDb> TableDb { get; set; }
        public virtual DbSet<TableName> TableName { get; set; }
        public virtual DbSet<TelefonosTipo> TelefonosTipo { get; set; }
        public virtual DbSet<TipoCodigoBarra> TipoCodigoBarra { get; set; }
        public virtual DbSet<TransporteCombustibleTipo> TransporteCombustibleTipo { get; set; }
        public virtual DbSet<TransporteCombustionTipo> TransporteCombustionTipo { get; set; }
        public virtual DbSet<TransporteCubiertaCondicion> TransporteCubiertaCondicion { get; set; }
        public virtual DbSet<TransporteCubiertaDiseno> TransporteCubiertaDiseno { get; set; }
        public virtual DbSet<TransporteCubiertaEstado> TransporteCubiertaEstado { get; set; }
        public virtual DbSet<TransporteCubiertaMarca> TransporteCubiertaMarca { get; set; }
        public virtual DbSet<TransporteCubiertaMedida> TransporteCubiertaMedida { get; set; }
        public virtual DbSet<TransporteDireccionTipo> TransporteDireccionTipo { get; set; }
        public virtual DbSet<TransporteTransmisionTipo> TransporteTransmisionTipo { get; set; }
        public virtual DbSet<TransporteVehiculoMarca> TransporteVehiculoMarca { get; set; }
        public virtual DbSet<TransporteVehiculoTipo> TransporteVehiculoTipo { get; set; }
        public virtual DbSet<TypeControl> TypeControl { get; set; }
        public virtual DbSet<UnidadesMedidaBase> UnidadesMedidaBase { get; set; }
        public virtual DbSet<UsuarioAlmaMobile> UsuarioAlmaMobile { get; set; }
        public virtual DbSet<UsuarioAlmaNet> UsuarioAlmaNet { get; set; }
        public virtual DbSet<UsuarioAlmaNetAuditoria> UsuarioAlmaNetAuditoria { get; set; }
        public virtual DbSet<UsuarioAlmaNetequipo> UsuarioAlmaNetequipo { get; set; }
        public virtual DbSet<UsuarioPerfil> UsuarioPerfil { get; set; }
        public virtual DbSet<UsuarioWeb> UsuarioWeb { get; set; }
        public virtual DbSet<VersionLog> VersionLog { get; set; }
        public virtual DbSet<WebForm> WebForm { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccesoAutorizacion>(entity =>
            {
                entity.Property(e => e.AccesolId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccesoEspecial>(entity =>
            {
                entity.Property(e => e.AccEspecialId).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsFixedLength();
            });

            modelBuilder.Entity<AplicacionLicencia>(entity =>
            {
                entity.Property(e => e.LicenciaId).ValueGeneratedNever();

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Resp. Inscripto- Resp. Monotributo, Consumidor Final, Etc. Se obtiene de AlmaNET ImpuestoCategoria");

                entity.Property(e => e.ClienteId).HasComment("Codigo Cliente");

                entity.Property(e => e.Domicilio).IsFixedLength();

                entity.Property(e => e.EsAzure).HasComment("Indica q la licencia esta por azure ");

                entity.Property(e => e.EstadoId).HasComment("0- Solicitud Alta 1- Activada 2-Renovacion (Cambio PC) 3-Modif. Modulos");

                entity.Property(e => e.FechaActualizacion).HasComment("Fecha actualizacion, Licencia (utilizada como referencia para e caso de verificar Saldo)");

                entity.Property(e => e.LicenciaTipoId).HasComment("Tipo Liciencia (0-General 1-Lite(reducida, Monotributista)");

                entity.Property(e => e.LlaveTerminales).HasComment("llave q se utiliza para acceso al servidor de las terminales");

                entity.Property(e => e.NombreFantasia).IsFixedLength();

                entity.Property(e => e.NroIdentificacion).HasComment("Nro de Cuit/ Nro Documento, Cedula etc.");

                entity.Property(e => e.Observaciones).HasComment("Referencias sobre la instalacione de esta licencia");

                entity.Property(e => e.TelefonoNro).HasComment("Indicar el Nro de Telefono");

                entity.Property(e => e.TipoNroIdentificacion).HasComment("0-Nada 1-Fiscal CUIT 2-Documento // Se obtiene de AlmaNet EntidadIdentificacionTipo");

                entity.Property(e => e.VerificarSaldo).HasComment("Inidica si sobre la llave se tiene q verificar saldo");
            });

            modelBuilder.Entity<AplicacionLicenciaActividad>(entity =>
            {
                entity.HasOne(d => d.Licencia)
                    .WithMany(p => p.AplicacionLicenciaActividad)
                    .HasForeignKey(d => d.LicenciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AplicacionLicenciaActividad_AplicacionLicencia");
            });

            modelBuilder.Entity<AplicacionLicenciaModulo>(entity =>
            {
                entity.Property(e => e.LicenciaModuloId).ValueGeneratedNever();

                entity.HasOne(d => d.Licencia)
                    .WithMany(p => p.AplicacionLicenciaModulo)
                    .HasForeignKey(d => d.LicenciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AplicacionLicenciaModulo_AplicacionLicencia");

                entity.HasOne(d => d.ModuloNavigation)
                    .WithMany(p => p.AplicacionLicenciaModulo)
                    .HasForeignKey(d => d.ModuloId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AplicacionLicenciaModulo_AplicacionModulo");
            });

            modelBuilder.Entity<AplicacionModulo>(entity =>
            {
                entity.Property(e => e.ModuloId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArchivoModelo>(entity =>
            {
                entity.HasKey(e => e.ModeloArchivoId)
                    .HasName("PK_ArchivosClasificacion");

                entity.Property(e => e.ModeloArchivoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Banco>(entity =>
            {
                entity.Property(e => e.BancoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BancoSucursal>(entity =>
            {
                entity.Property(e => e.BancoSucursalId).ValueGeneratedNever();

                entity.HasOne(d => d.Banco)
                    .WithMany(p => p.BancoSucursal)
                    .HasForeignKey(d => d.BancoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BancoSucursal_Banco");

                entity.HasOne(d => d.Ciudad)
                    .WithMany(p => p.BancoSucursal)
                    .HasForeignKey(d => d.CiudadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BancoSucursal_PaisProvinciaEstadoCiudad");
            });

            modelBuilder.Entity<BilletesDesglose>(entity =>
            {
                entity.Property(e => e.DesgloseId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BuscarConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.AlmaUserId, e.TableId });

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.BuscarConfiguracion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_BuscarConfiguracion_UsuarioAlmaNet");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.BuscarConfiguracion)
                    .HasForeignKey(d => d.TableId)
                    .HasConstraintName("FK_BuscarConfiguracion_TableName");
            });

            modelBuilder.Entity<ComercioTipo>(entity =>
            {
                entity.HasKey(e => e.TipoComercioId)
                    .HasName("PK_ClienteComercio");

                entity.Property(e => e.TipoComercioId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ComprobanteTipo>(entity =>
            {
                entity.HasKey(e => e.ComprobanteId)
                    .HasName("PK_ImpuestosComprobantes");

                entity.Property(e => e.ComprobanteId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ComprobanteTipoOperacionTipo>(entity =>
            {
                entity.Property(e => e.RegCompOperId).ValueGeneratedNever();

                entity.HasOne(d => d.Comprobante)
                    .WithMany(p => p.ComprobanteTipoOperacionTipo)
                    .HasForeignKey(d => d.ComprobanteId)
                    .HasConstraintName("FK_ComprobanteTipoOperacionTipo_ComprobanteTipo");

                entity.HasOne(d => d.TipoOperacion)
                    .WithMany(p => p.ComprobanteTipoOperacionTipo)
                    .HasForeignKey(d => d.TipoOperacionId)
                    .HasConstraintName("FK_ComprobanteTipoOperacionTipo_OperacionTipo");
            });

            modelBuilder.Entity<ConfiguracionNet>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ConfiguracionAlmaNET");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContabilidadIndiceAjusteInflacion>(entity =>
            {
                entity.Property(e => e.RegId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CultureInfo>(entity =>
            {
                entity.Property(e => e.PaisId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmpaqueTipo>(entity =>
            {
                entity.Property(e => e.EmpaqueId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmpleadoTipo>(entity =>
            {
                entity.Property(e => e.EmpleadoTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Empresa>(entity =>
            {
                entity.Property(e => e.EmpresaId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.Empresa)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_Empresa_UsuarioAlmaNet");

                entity.HasOne(d => d.Licencia)
                    .WithMany(p => p.Empresa)
                    .HasForeignKey(d => d.LicenciaId)
                    .HasConstraintName("FK_Empresa_AplicacionLicencia1");
            });

            modelBuilder.Entity<EmpresaTipo>(entity =>
            {
                entity.Property(e => e.TipoEmpresaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmpresaUsuario>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_EmpresaLogin");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.EmpresaUsuario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_EmpresaUsuario_UsuarioAlmaNet");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.EmpresaUsuario)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_EmpresaLogin_Empresa");
            });

            modelBuilder.Entity<EntidadGrupoSangineoTipo>(entity =>
            {
                entity.Property(e => e.GrupoSangineoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EntidadTipo>(entity =>
            {
                entity.HasKey(e => e.TipoEntidadId)
                    .HasName("PK_Entidades");
            });

            modelBuilder.Entity<EquipoEmpresa>(entity =>
            {
                entity.Property(e => e.IdEquipo).ValueGeneratedNever();
            });

            modelBuilder.Entity<ErrorMessage>(entity =>
            {
                entity.Property(e => e.ErrorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Form>(entity =>
            {
                entity.Property(e => e.FormId).ValueGeneratedNever();
            });

            modelBuilder.Entity<FormCampos>(entity =>
            {
                entity.Property(e => e.CamposId).ValueGeneratedNever();

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.FormCampos)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_FormCampos_Form");

                entity.HasOne(d => d.TypeControl)
                    .WithMany(p => p.FormCampos)
                    .HasForeignKey(d => d.TypeControlId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FormCampos_TypeControl");
            });

            modelBuilder.Entity<IdentificacionTipo>(entity =>
            {
                entity.HasKey(e => e.TipoNroIdentificacion)
                    .HasName("PK_EntidadNroIdentificacionTipo");
            });

            modelBuilder.Entity<Impuesto>(entity =>
            {
                entity.Property(e => e.ImpuestoId).ValueGeneratedNever();

                entity.Property(e => e.BaseImponibleCompras).HasComment("Expresion Utilizada para Determinar la Base Imponible de Compras");

                entity.Property(e => e.BaseImponibleVentas).HasComment("Expresion Utilizada para Determinar la Base imponible de Venta (Si en la expresi�n se encontrara el signo +; a la base imponible se le sumar� el importe de los impuestos)");

                entity.Property(e => e.CalculaPorUnidad).HasComment("Utilizado para indicar que el calculo se realiza pon cantidad Ingresada en OperacionItemProducto");

                entity.Property(e => e.CalcularPorItem).HasComment("Si el calculo del Impuesto se realiza Por Item");

                entity.Property(e => e.CalcularSobreImpuesto).HasComment("ImpuestoID Sobre el cual se calcula. Calcular el Impuesto de acuerdo al porcentaje de otro impuesto. Ej Las percepciones se calcucan con un porcentaje del %50 sobre cada alicuota de iva aplicada. Si se aplica el 21% la perc. seria del 10.5%");

                entity.Property(e => e.DetalleImpuesto).HasComment("Explicacion de forma de calculo y leyes y Regimenes que dan origen al Impuesto");

                entity.Property(e => e.ImpoteDeducir).HasComment("Importe  del Impuesto (Es fijo y no refiere a un calculo)");

                entity.Property(e => e.MontoAcumulado).HasComment("Monto Acumulado que tiene que tener la base imponible (refiere a que puede ser en varios comprobantes ) el Impuesto es aplicable cuandu el Monto acumulado del Impuesto supera el valor ingresado");

                entity.Property(e => e.MontoMinimo).HasComment("Monto Minimo que tiene que tener El resultado de la Exprecion de la base Imponible para aplicar el impuesto");

                entity.Property(e => e.OrdenCalculo).HasComment("Indica el orden en q se tiene q aplicar el calculo del impuesto en las operaciones");

                entity.Property(e => e.PocentajeDeducir).HasComment("Porcentaje utilizado para calcular el importe del impuesto sobre la Base imponible");

                entity.Property(e => e.PorCodigoActividadComprador).HasComment("Si se implementa segun Codigo Actividad de la Entidad que COMPRA o Recibe el Comprobante");

                entity.Property(e => e.PorCodigoActividadVendedor).HasComment("Si se implementa segun Codigo Actividad de la Entidad que VENDE o Emite el Comprobante");

                entity.Property(e => e.PorZonaDeImpuestosComprador).HasComment("Si se implementa segun zona del impuesto de la Entidad que COMPRA o Recibe el Comprobante");

                entity.Property(e => e.PorZonaDeImpuestosVendedor).HasComment("Si se implementa segun zona del impuesto de la Entidad que VENDE o Emite el Comprobante");

                entity.Property(e => e.ProgramaConfImpuesto).HasComment("Aplicativo para generar configuraciones adicionales para este impuesto");

                entity.Property(e => e.ProgramaParaComprobante).HasComment("Aplicativo que genrea el comprobante de Impuesto");

                entity.Property(e => e.ProgramaParaInforme).HasComment("Aplicativo para obtner informe del Impuesto");

                entity.Property(e => e.ReferenciaWeb).HasComment("Pag. web donde se pueden obtener mas referencias del impuesto");

                entity.Property(e => e.ReseteaAnualmente).HasComment("-No aplicable");

                entity.Property(e => e.ReseteaDias).HasComment("A pardir de que dia del mes se resetea el Impuesto (Ejem. 1 indica que el 1 de cada mes el monto acumulado queda en 0)");

                entity.Property(e => e.ReseteaMensualmente).HasComment("Indica a partir de que mes se resetea el Monto Acumulado");

                entity.Property(e => e.SumaAlTotal).HasComment("Indica si el impuesta se suma al Total del Comprobante o al Total del Item");
            });

            modelBuilder.Entity<ImpuestoBaseImponible>(entity =>
            {
                entity.HasKey(e => e.ImpuestoBaseId)
                    .HasName("PK__Impuesto");

                entity.Property(e => e.ImpuestoBaseId).ValueGeneratedNever();

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoBaseImponible)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoBaseImponible_Impuesto");
            });

            modelBuilder.Entity<ImpuestoCategoria>(entity =>
            {
                entity.HasKey(e => e.CategoriaImpuestoId)
                    .HasName("PK_ImpuestosCategoria");
            });

            modelBuilder.Entity<ImpuestoCodigoActividad>(entity =>
            {
                entity.HasKey(e => e.CodigoActividadId)
                    .HasName("PK_ImpuestosCodigoActividad");

                entity.Property(e => e.CodigoActividadId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ImpuestoDesglose>(entity =>
            {
                entity.HasComment("Permite desglosar la aplicacion del impuesto segun categorias especificadas o Regimen a Aplicar ejem Ret. Ganacia RG 3884");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CodigAdic).HasComment("Indica Codigo Adic. Ejem. Nro Regimen");

                entity.Property(e => e.ImpoteDeducir).HasComment("Importe  del Impuesto (Es fijo y no refiere a un calculo)");

                entity.Property(e => e.MontoAcumulado).HasComment("Monto Acumulado que tiene que tener la base imponible (refiere a que puede ser en varios comprobantes ) el Impuesto es aplicable cuandu el Monto acumulado del Impuesto supera el valor ingresado");

                entity.Property(e => e.MontoMinimo).HasComment("Monto Minimo que tiene que tener El resultado de la Exprecion de la base Imponible para aplicar el impuesto");

                entity.Property(e => e.PocentajeDeducir).HasComment("Porcentaje utilizado para calcular el importe del impuesto sobre la Base imponible");

                entity.Property(e => e.ReseteaAnualmente).HasComment("-No aplicable");

                entity.Property(e => e.ReseteaMensualmente).HasComment("Indica a partir de que mes se resetea el Monto Acumulado");

                entity.Property(e => e.SumaAlTotal).HasComment("Indica si el impuesta se suma al Total del Comprobante o al Total del Item");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoDesglose)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoDesglose_Impuesto");
            });

            modelBuilder.Entity<ImpuestoEmisionComprobante>(entity =>
            {
                entity.HasKey(e => e.EmisionId)
                    .HasName("PK_ImpuestosEmisionComprobantes");

                entity.Property(e => e.EmisionId).ValueGeneratedNever();

                entity.HasOne(d => d.CompradorCategoriaImpuesto)
                    .WithMany(p => p.ImpuestoEmisionComprobanteCompradorCategoriaImpuesto)
                    .HasForeignKey(d => d.CompradorCategoriaImpuestoId)
                    .HasConstraintName("FK_ImpuestosEmisionComprobantes_ImpuestosCategoria");

                entity.HasOne(d => d.RegCompOper)
                    .WithMany(p => p.ImpuestoEmisionComprobante)
                    .HasForeignKey(d => d.RegCompOperId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ImpuestoEmisionComprobante_ComprobanteTipoOperacionTipo");

                entity.HasOne(d => d.VendedorCategoriaImpuesto)
                    .WithMany(p => p.ImpuestoEmisionComprobanteVendedorCategoriaImpuesto)
                    .HasForeignKey(d => d.VendedorCategoriaImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestosEmisionComprobantes_ImpuestosCategoria1");
            });

            modelBuilder.Entity<ImpuestoPorCodigoActividadComprador>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.CodigoActividad)
                    .WithMany(p => p.ImpuestoPorCodigoActividadComprador)
                    .HasForeignKey(d => d.CodigoActividadId)
                    .HasConstraintName("FK_ImpuestoPorCodigoActividadComprador_ImpuestoCodigoActividad");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoPorCodigoActividadComprador)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorCodigoActividadComprador_Impuesto");
            });

            modelBuilder.Entity<ImpuestoPorCodigoActividadVendedor>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ImpuestoPorCodigoActividad");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.CodigoActividad)
                    .WithMany(p => p.ImpuestoPorCodigoActividadVendedor)
                    .HasForeignKey(d => d.CodigoActividadId)
                    .HasConstraintName("FK_ImpuestosPorCodigoActividad_ImpuestosCodigoActividad");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoPorCodigoActividadVendedor)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestosPorCodigoActividad_Impuestos");
            });

            modelBuilder.Entity<ImpuestoPorEmisionComprobante>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ImpuestosPorEmisionComprobantes");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Emision)
                    .WithMany(p => p.ImpuestoPorEmisionComprobante)
                    .HasForeignKey(d => d.EmisionId)
                    .HasConstraintName("FK_ImpuestosPorEmisionComprobantes_ImpuestosEmisionComprobantes");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoPorEmisionComprobante)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorEmisionComprobante_Impuesto");
            });

            modelBuilder.Entity<ImpuestoPorZonaComprador>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoPorZonaComprador)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorZonaComprador_Impuesto");

                entity.HasOne(d => d.ZonaImpuesto)
                    .WithMany(p => p.ImpuestoPorZonaComprador)
                    .HasForeignKey(d => d.ZonaImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorZonaComprador_ImpuestoZona");
            });

            modelBuilder.Entity<ImpuestoPorZonaCompradorCategoria>(entity =>
            {
                entity.HasOne(d => d.CategoriaImpuesto)
                    .WithMany(p => p.ImpuestoPorZonaCompradorCategoria)
                    .HasForeignKey(d => d.CategoriaImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorZonaCompradorCategoria_ImpuestoCategoria");

                entity.HasOne(d => d.RegistroIdzonaCompradorNavigation)
                    .WithMany(p => p.ImpuestoPorZonaCompradorCategoria)
                    .HasForeignKey(d => d.RegistroIdzonaComprador)
                    .HasConstraintName("FK_ImpuestoPorZonaCompradorCategoria_ImpuestoPorZonaComprador");
            });

            modelBuilder.Entity<ImpuestoPorZonaVendedor>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ImpuestoPorZona");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoPorZonaVendedor)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestosPorZonas_Impuestos");

                entity.HasOne(d => d.ZonaImpuesto)
                    .WithMany(p => p.ImpuestoPorZonaVendedor)
                    .HasForeignKey(d => d.ZonaImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestosPorZonas_ImpuestosZonasDeImpuestos");
            });

            modelBuilder.Entity<ImpuestoPorZonaVendedorCategoria>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.CategoriaImpuesto)
                    .WithMany(p => p.ImpuestoPorZonaVendedorCategoria)
                    .HasForeignKey(d => d.CategoriaImpuestoId)
                    .HasConstraintName("FK_ImpuestoPorZonaVendedorCategoria_ImpuestoCategoria");

                entity.HasOne(d => d.RegistroIdzonaVendedorNavigation)
                    .WithMany(p => p.ImpuestoPorZonaVendedorCategoria)
                    .HasForeignKey(d => d.RegistroIdzonaVendedor)
                    .HasConstraintName("FK_ImpuestoPorZonaVendedorCategoria_ImpuestoPorZonaVendedor");
            });

            modelBuilder.Entity<ImpuestoZona>(entity =>
            {
                entity.HasKey(e => e.ZonaImpuestoId)
                    .HasName("PK_ZonasImpuestos");

                entity.Property(e => e.ZonaImpuestoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InasistenciaTipo>(entity =>
            {
                entity.Property(e => e.TipoInasistencia).ValueGeneratedNever();
            });

            modelBuilder.Entity<InstitucionBeneficencia>(entity =>
            {
                entity.HasKey(e => e.InstitucionBeneficienciaId)
                    .HasName("PK_InstitucionBeneficiencia");

                entity.Property(e => e.InstitucionBeneficienciaId).ValueGeneratedNever();

                entity.Property(e => e.BancoCbu).IsFixedLength();

                entity.Property(e => e.BancoCbu2).IsFixedLength();
            });

            modelBuilder.Entity<Licencia>(entity =>
            {
                entity.Property(e => e.LicenciaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<LicenciaIndiceTabla>(entity =>
            {
                entity.HasKey(e => new { e.LicenciaId, e.TableId });
            });

            modelBuilder.Entity<Login>(entity =>
            {
                entity.Property(e => e.LoginId).ValueGeneratedNever();
            });

            modelBuilder.Entity<LoginPermiso>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_UsuarioPermiso");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.LoginPermiso)
                    .HasForeignKey(d => d.EmpresaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_LoginPermiso_Empresa");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.LoginPermiso)
                    .HasForeignKey(d => d.LoginId)
                    .HasConstraintName("FK_LoginPermiso_Login");

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.LoginPermiso)
                    .HasForeignKey(d => d.PermisoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoginPermiso_Permiso");
            });

            modelBuilder.Entity<MercadoPagoCuenta>(entity =>
            {
                entity.Property(e => e.MercadoPagoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Moroso>(entity =>
            {
                entity.Property(e => e.MorosoId).ValueGeneratedNever();

                entity.HasOne(d => d.Ciudad)
                    .WithMany(p => p.Moroso)
                    .HasForeignKey(d => d.CiudadId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Moroso_PaisProvinciaEstadoCiudad");
            });

            modelBuilder.Entity<MuestreoVenta>(entity =>
            {
                entity.Property(e => e.RegId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<NoticiaCanal>(entity =>
            {
                entity.HasKey(e => e.CanalNoticiaId)
                    .HasName("PK_NoticiaCanalTipo");

                entity.Property(e => e.CanalNoticiaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<NoticiaCanalTipo>(entity =>
            {
                entity.HasKey(e => new { e.CanalNoticiaId, e.NoticiaTipoId })
                    .HasName("PK_NoticiaCanalTipo_2");

                entity.HasComment("Indica los ditintos tipos de Noticias por Canal");

                entity.Property(e => e.CanalNoticiaId).HasComment("Indica el Proveedor de RSS (Ejem. Clarin, Nacion, Etc)");

                entity.Property(e => e.NoticiaTipoId).HasComment("Indica el Tipo de Nocia (Ejem. Policial, Internacional, Economica, etc)");

                entity.HasOne(d => d.CanalNoticia)
                    .WithMany(p => p.NoticiaCanalTipo)
                    .HasForeignKey(d => d.CanalNoticiaId)
                    .HasConstraintName("FK_NoticiaCanalTipo_NoticiaCanal");

                entity.HasOne(d => d.NoticiaTipo)
                    .WithMany(p => p.NoticiaCanalTipo)
                    .HasForeignKey(d => d.NoticiaTipoId)
                    .HasConstraintName("FK_NoticiaCanalTipo_NoticiaTipo");
            });

            modelBuilder.Entity<NoticiaTipo>(entity =>
            {
                entity.Property(e => e.NoticiaTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OrdenServicioMantenimientoTipo>(entity =>
            {
                entity.Property(e => e.MantenimientoTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PadronAfip>(entity =>
            {
                entity.Property(e => e.ActividadMonotributo).IsFixedLength();

                entity.Property(e => e.Empleador).IsFixedLength();

                entity.Property(e => e.ImpuestoGanancia).IsFixedLength();

                entity.Property(e => e.ImpuestoIva).IsFixedLength();

                entity.Property(e => e.IntegranteSociedad).IsFixedLength();

                entity.Property(e => e.Monotributo).IsFixedLength();
            });

            modelBuilder.Entity<Pais>(entity =>
            {
                entity.Property(e => e.PaisId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PaisCuit>(entity =>
            {
                entity.Property(e => e.PaisCuitId).ValueGeneratedNever();

                entity.HasOne(d => d.Pais)
                    .WithMany(p => p.PaisCuit)
                    .HasForeignKey(d => d.PaisId)
                    .HasConstraintName("FK_PaisCuit_Pais");
            });

            modelBuilder.Entity<PaisProvinciaEstado>(entity =>
            {
                entity.Property(e => e.EstadoProvinciaId).ValueGeneratedNever();

                entity.HasOne(d => d.Pais)
                    .WithMany(p => p.PaisProvinciaEstado)
                    .HasForeignKey(d => d.PaisId)
                    .HasConstraintName("FK_ProvinciaEstado_Pais");
            });

            modelBuilder.Entity<PaisProvinciaEstadoCiudad>(entity =>
            {
                entity.HasKey(e => e.CiudadId)
                    .HasName("PK_PaisProvinciaEstadoCiudad_1");

                entity.Property(e => e.CiudadId).ValueGeneratedNever();

                entity.HasOne(d => d.EstadoProvincia)
                    .WithMany(p => p.PaisProvinciaEstadoCiudad)
                    .HasForeignKey(d => d.EstadoProvinciaId)
                    .HasConstraintName("FK_PaisProvinciaEstadoCiudad_PaisProvinciaEstado");
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.Property(e => e.PerfilId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Permiso>(entity =>
            {
                entity.Property(e => e.PermisoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PermisoAccesoEspecial>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.NivelAcceso).HasComment("Ejem. Restriccion Modificacion Precios 0-Tdos Restingidos 1-Compra 2-Costos 4-Ventas 8-Listas de Precios 16-Bonificaciones 32-Descuentos");

                entity.HasOne(d => d.AccEspecial)
                    .WithMany(p => p.PermisoAccesoEspecial)
                    .HasForeignKey(d => d.AccEspecialId)
                    .HasConstraintName("FK_PermisoAccesoEspecial_AccesoEspecial");

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoAccesoEspecial)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoAccesoEspecial_Permiso");
            });

            modelBuilder.Entity<PermisoForm>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.PermisoForm)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_PermisoForm_Form");

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoForm)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoForm_Permiso");
            });

            modelBuilder.Entity<PermisoFormCampos>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Campos)
                    .WithMany(p => p.PermisoFormCampos)
                    .HasForeignKey(d => d.CamposId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermisoFormCampos_FormCampos");

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoFormCampos)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoFormCampos_Permiso");
            });

            modelBuilder.Entity<PermisoReporte>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoReporte)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoReporte_Permiso");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.PermisoReporte)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_PermisoReporte_Reporte");
            });

            modelBuilder.Entity<PermisoTable>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_PermisoTabla");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoTable)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoTabla_Permiso");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.PermisoTable)
                    .HasForeignKey(d => d.TableId)
                    .HasConstraintName("FK_PermisoTabla_TableName");
            });

            modelBuilder.Entity<PermisoWebForm>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisoWebForm)
                    .HasForeignKey(d => d.PermisoId)
                    .HasConstraintName("FK_PermisoWebForm_Permiso");

                entity.HasOne(d => d.WebForm)
                    .WithMany(p => p.PermisoWebForm)
                    .HasForeignKey(d => d.WebFormId)
                    .HasConstraintName("FK_PermisoWebForm_WebForm");
            });

            modelBuilder.Entity<PermisosGenericos>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Accesol)
                    .WithMany(p => p.PermisosGenericos)
                    .HasForeignKey(d => d.AccesolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermisosGenericos_AccesoAutorizacion");

                entity.HasOne(d => d.Permiso)
                    .WithMany(p => p.PermisosGenericos)
                    .HasForeignKey(d => d.PermisoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PermisosGenericos_Permiso");
            });

            modelBuilder.Entity<PlanDeCuentasCentroCostoTipo>(entity =>
            {
                entity.Property(e => e.TipoCentroCostoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoNroSerieDetalleTipoCalculos>(entity =>
            {
                entity.Property(e => e.CalculoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoTipo>(entity =>
            {
                entity.Property(e => e.ProductoTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Reporte>(entity =>
            {
                entity.Property(e => e.ReportId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ReporteModificado>(entity =>
            {
                entity.Property(e => e.ReporteModifId).ValueGeneratedNever();

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReporteModificado)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReporteModificado_Reporte");
            });

            modelBuilder.Entity<SeguroPolizaTipo>(entity =>
            {
                entity.Property(e => e.PolizaTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TableDb>(entity =>
            {
                entity.HasKey(e => e.TableId)
                    .HasName("PK_Tablas");

                entity.Property(e => e.TableId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TableName>(entity =>
            {
                entity.HasKey(e => e.TableId)
                    .HasName("PK_Table");

                entity.Property(e => e.TableId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TipoCodigoBarra>(entity =>
            {
                entity.Property(e => e.TipoCodigoBarraId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCombustibleTipo>(entity =>
            {
                entity.Property(e => e.CombustibleTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCombustionTipo>(entity =>
            {
                entity.Property(e => e.CombustionTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCubiertaCondicion>(entity =>
            {
                entity.HasKey(e => e.CondicionCubiertaId)
                    .HasName("PK_TrasporteCondicionCubierta");

                entity.Property(e => e.CondicionCubiertaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCubiertaDiseno>(entity =>
            {
                entity.HasKey(e => e.DiseñoCubiertaId)
                    .HasName("PK_TransporteCubiertaDiseño");

                entity.Property(e => e.DiseñoCubiertaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCubiertaMarca>(entity =>
            {
                entity.HasKey(e => e.MarcaId)
                    .HasName("PK_TransporteMarcaCubierta");

                entity.Property(e => e.MarcaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCubiertaMedida>(entity =>
            {
                entity.HasKey(e => e.MedidaCubiertaId)
                    .HasName("PK_TransporteMedidaCubierta");

                entity.Property(e => e.MedidaCubiertaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteDireccionTipo>(entity =>
            {
                entity.Property(e => e.TransDireccionTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteTransmisionTipo>(entity =>
            {
                entity.Property(e => e.TransmisionTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteVehiculoMarca>(entity =>
            {
                entity.HasKey(e => e.MarcaVehiculoId)
                    .HasName("PK_Marca");

                entity.Property(e => e.MarcaVehiculoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteVehiculoTipo>(entity =>
            {
                entity.Property(e => e.TipoVehiculoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TypeControl>(entity =>
            {
                entity.Property(e => e.TypeControlId).ValueGeneratedNever();
            });

            modelBuilder.Entity<UnidadesMedidaBase>(entity =>
            {
                entity.HasKey(e => e.UnidadMedidaId)
                    .HasName("PK_UnidadesMedida");

                entity.Property(e => e.UnidadMedidaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<UsuarioAlmaMobile>(entity =>
            {
                entity.HasComment("Indica todos los Dispositivos Vinculardos a Este Usuario de Alma");

                entity.Property(e => e.AlmaMobileId)
                    .ValueGeneratedNever()
                    .HasComment("DispositivoID (autoicrementar)");

                entity.Property(e => e.AlmaUserId).HasComment("UsuarioID en AlmaNET");

                entity.Property(e => e.Contraseña).HasComment("Contraseña dispositivo");

                entity.Property(e => e.DiasAdicionales).HasComment("para posibilitar que se asigne días adicionales de visitas");

                entity.Property(e => e.EsDemo).HasComment("Indica q esta funcioando como DEMO");

                entity.Property(e => e.FechaHoraAlta).HasComment("Indica la Fecha y hora q se utilizo 1era ves en el dispositivo");

                entity.Property(e => e.Modulos).HasComment("0- Indica todos los modulos (Valor binario para indicar q modulos se habilitaran )");

                entity.Property(e => e.NombreUsuario).HasComment("Nombre Usuario en El Dispositivo");

                entity.Property(e => e.NroSerieDispositivo)
                    .IsFixedLength()
                    .HasComment("Nro Serie / Nro Unico para identificar el dsipositivo");

                entity.Property(e => e.RealizaEncuesta).HasComment("nul 0- No realiza encuesta 1-Todas las Encuestas 10-Encuesta x cada Visita 20- Encuesta solo No Realizaron Pedidos ");

                entity.Property(e => e.RegistraOperacionTipo).HasComment("10- Pedidos 20-Presupuesto 30-Facturacion directa");

                entity.Property(e => e.RutaId).HasComment("Indico la RUTA  Asignada para trabajar (Vendedores), filtra en el dipositivo solo Clientes de esta RUTA");

                entity.Property(e => e.SincronizacionBajada).HasComment("Ultima ves q se conecto para bajar informacion,registra el momento en que se actulizaron los datos en el cel  (ejem. Actulizacion PRecios)");

                entity.Property(e => e.SincronizacionSubida).HasComment("La idea es que se pueda saber cuando fue la ultima ves q se conecto para subir informacion (Pedidos, etc.)");

                entity.Property(e => e.SoloClientesDia).HasComment(" indica que al vendedor se le mostrará únicamente los clientes de dicho día de visita");

                entity.Property(e => e.SoloConStock).HasComment("Valor Binario 0-Todos 1-Con Stock 2-Pendiente Recibir  ");

                entity.Property(e => e.SoloDatosVendedor).HasComment("Indica si solo sincroniza datos vinculados a este vendedor");

                entity.Property(e => e.VendedorId).HasComment("VendedorID Vinculado");

                entity.Property(e => e.ZonaId).HasComment("Indico la Zona Asignada para trabajar (Vendedores), filtra en el dipositivo solo Clientes de esta Zona");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioAlmaMobile)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioAlmaMobile_UsuarioAlmaNet");
            });

            modelBuilder.Entity<UsuarioAlmaNet>(entity =>
            {
                entity.HasKey(e => e.AlmaUserId)
                    .HasName("PK_User");

                entity.Property(e => e.AlmaUserId).ValueGeneratedNever();

                entity.Property(e => e.PassWord).UseCollation("Modern_Spanish_CS_AS");

                entity.Property(e => e.UserName).UseCollation("Modern_Spanish_CS_AS");

                entity.Property(e => e.VersionSelector).IsFixedLength();

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.UsuarioAlmaNet)
                    .HasForeignKey(d => d.LoginId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_User_Login");
            });

            modelBuilder.Entity<UsuarioAlmaNetAuditoria>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioAlmaNetAuditoria)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_UsuarioAlmaNetAuditoria_UsuarioAlmaNet");
            });

            modelBuilder.Entity<UsuarioAlmaNetequipo>(entity =>
            {
                entity.HasComment("Usuario AlmaNet q se concede permsiso Sobre el Servidor en la Nube");

                entity.Property(e => e.ActivacionEstadoId).HasComment("0-No asigando, 1-Activado 10-Solicitado");

                entity.Property(e => e.CondicionConexion).HasComment("Permite Establecer dias y horarios");

                entity.Property(e => e.UsuarioSistema).HasComment("Nombre usuario de Windows/Escritorio Remoto");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioAlmaNetequipo)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_UsuarioAlmaNETEquipo_UsuarioAlmaNet");

                entity.HasOne(d => d.IdEquipoNavigation)
                    .WithMany(p => p.UsuarioAlmaNetequipo)
                    .HasForeignKey(d => d.IdEquipo)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UsuarioAlmaNETEquipo_EquipoEmpresa");
            });

            modelBuilder.Entity<UsuarioPerfil>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioPerfil)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_UsuarioPerfil_UsuarioAlmaNet");

                entity.HasOne(d => d.Perfil)
                    .WithMany(p => p.UsuarioPerfil)
                    .HasForeignKey(d => d.PerfilId)
                    .HasConstraintName("FK_UsuarioPerfil_Perfil");
            });

            modelBuilder.Entity<UsuarioWeb>(entity =>
            {
                entity.Property(e => e.WebUserId).ValueGeneratedNever();

                entity.Property(e => e.CodigoAcceso).IsFixedLength();

                entity.Property(e => e.Configuracion).HasComment("Guarda una configuracion x Usuario");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioWeb)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_UsuarioWeb_UsuarioAlmaNet");
            });

            modelBuilder.Entity<VersionLog>(entity =>
            {
                entity.Property(e => e.VersionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WebForm>(entity =>
            {
                entity.Property(e => e.WebFormId).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}