// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace DRR.Core.DBAlmaNET.Models
{
    public partial class Impuesto
    {
        public Impuesto()
        {
            ImpuestoBaseImponible = new HashSet<ImpuestoBaseImponible>();
            ImpuestoDesglose = new HashSet<ImpuestoDesglose>();
            ImpuestoPorCodigoActividadComprador = new HashSet<ImpuestoPorCodigoActividadComprador>();
            ImpuestoPorCodigoActividadVendedor = new HashSet<ImpuestoPorCodigoActividadVendedor>();
            ImpuestoPorEmisionComprobante = new HashSet<ImpuestoPorEmisionComprobante>();
            ImpuestoPorZonaComprador = new HashSet<ImpuestoPorZonaComprador>();
            ImpuestoPorZonaVendedor = new HashSet<ImpuestoPorZonaVendedor>();
        }

        [Key]
        [Column("ImpuestoID")]
        public short ImpuestoId { get; set; }
        [Required]
        [StringLength(50)]
        [Unicode(false)]
        public string DescripcionImpuesto { get; set; }
        /// <summary>
        /// Explicacion de forma de calculo y leyes y Regimenes que dan origen al Impuesto
        /// </summary>
        [Unicode(false)]
        public string DetalleImpuesto { get; set; }
        /// <summary>
        /// Indica si el impuesta se suma al Total del Comprobante o al Total del Item
        /// </summary>
        public bool SumaAlTotal { get; set; }
        /// <summary>
        /// Si se implementa segun Codigo Actividad de la Entidad que VENDE o Emite el Comprobante
        /// </summary>
        public bool PorCodigoActividadVendedor { get; set; }
        /// <summary>
        /// Si se implementa segun Codigo Actividad de la Entidad que COMPRA o Recibe el Comprobante
        /// </summary>
        public bool PorCodigoActividadComprador { get; set; }
        /// <summary>
        /// Si se implementa segun zona del impuesto de la Entidad que VENDE o Emite el Comprobante
        /// </summary>
        public bool PorZonaDeImpuestosVendedor { get; set; }
        /// <summary>
        /// Si se implementa segun zona del impuesto de la Entidad que COMPRA o Recibe el Comprobante
        /// </summary>
        public bool PorZonaDeImpuestosComprador { get; set; }
        /// <summary>
        /// Si el calculo del Impuesto se realiza Por Item
        /// </summary>
        public bool CalcularPorItem { get; set; }
        /// <summary>
        /// Expresion Utilizada para Determinar la Base imponible de Venta (Si en la expresi�n se encontrara el signo +; a la base imponible se le sumar� el importe de los impuestos)
        /// </summary>
        [Required]
        [StringLength(50)]
        [Unicode(false)]
        public string BaseImponibleVentas { get; set; }
        /// <summary>
        /// Expresion Utilizada para Determinar la Base Imponible de Compras
        /// </summary>
        [Required]
        [StringLength(50)]
        [Unicode(false)]
        public string BaseImponibleCompras { get; set; }
        /// <summary>
        /// Porcentaje utilizado para calcular el importe del impuesto sobre la Base imponible
        /// </summary>
        [Column(TypeName = "decimal(15, 3)")]
        public decimal? PocentajeDeducir { get; set; }
        /// <summary>
        /// Importe  del Impuesto (Es fijo y no refiere a un calculo)
        /// </summary>
        [Column(TypeName = "money")]
        public decimal? ImpoteDeducir { get; set; }
        /// <summary>
        /// Monto Minimo que tiene que tener El resultado de la Exprecion de la base Imponible para aplicar el impuesto
        /// </summary>
        [Column(TypeName = "money")]
        public decimal? MontoMinimo { get; set; }
        /// <summary>
        /// Monto Acumulado que tiene que tener la base imponible (refiere a que puede ser en varios comprobantes ) el Impuesto es aplicable cuandu el Monto acumulado del Impuesto supera el valor ingresado
        /// </summary>
        [Column(TypeName = "money")]
        public decimal? MontoAcumulado { get; set; }
        /// <summary>
        /// A pardir de que dia del mes se resetea el Impuesto (Ejem. 1 indica que el 1 de cada mes el monto acumulado queda en 0)
        /// </summary>
        public bool? ReseteaDias { get; set; }
        /// <summary>
        /// Indica a partir de que mes se resetea el Monto Acumulado
        /// </summary>
        public bool? ReseteaMensualmente { get; set; }
        /// <summary>
        /// -No aplicable
        /// </summary>
        public bool? ReseteaAnualmente { get; set; }
        /// <summary>
        /// Aplicativo para obtner informe del Impuesto
        /// </summary>
        [StringLength(50)]
        [Unicode(false)]
        public string ProgramaParaInforme { get; set; }
        /// <summary>
        /// Aplicativo que genrea el comprobante de Impuesto
        /// </summary>
        [StringLength(50)]
        [Unicode(false)]
        public string ProgramaParaComprobante { get; set; }
        /// <summary>
        /// Aplicativo para generar configuraciones adicionales para este impuesto
        /// </summary>
        [StringLength(50)]
        [Unicode(false)]
        public string ProgramaConfImpuesto { get; set; }
        /// <summary>
        /// Pag. web donde se pueden obtener mas referencias del impuesto
        /// </summary>
        [StringLength(250)]
        [Unicode(false)]
        public string ReferenciaWeb { get; set; }
        public bool EsRetencion { get; set; }
        [Column("ImpuestoIDER")]
        public short? ImpuestoIder { get; set; }
        public bool? EsOtroTributo { get; set; }
        /// <summary>
        /// ImpuestoID Sobre el cual se calcula. Calcular el Impuesto de acuerdo al porcentaje de otro impuesto. Ej Las percepciones se calcucan con un porcentaje del %50 sobre cada alicuota de iva aplicada. Si se aplica el 21% la perc. seria del 10.5%
        /// </summary>
        public short? CalcularSobreImpuesto { get; set; }
        /// <summary>
        /// Utilizado para indicar que el calculo se realiza pon cantidad Ingresada en OperacionItemProducto
        /// </summary>
        public bool? CalculaPorUnidad { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? FechaActualizacion { get; set; }
        /// <summary>
        /// Indica el orden en q se tiene q aplicar el calculo del impuesto en las operaciones
        /// </summary>
        public short OrdenCalculo { get; set; }
        [Column("TipoImpuestoID")]
        public short? TipoImpuestoId { get; set; }
        public bool? DesgloseSegunMonto { get; set; }
        public bool? Inhabilitado { get; set; }
        public bool? PorEntidad { get; set; }

        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoBaseImponible> ImpuestoBaseImponible { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoDesglose> ImpuestoDesglose { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoPorCodigoActividadComprador> ImpuestoPorCodigoActividadComprador { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoPorCodigoActividadVendedor> ImpuestoPorCodigoActividadVendedor { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoPorEmisionComprobante> ImpuestoPorEmisionComprobante { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoPorZonaComprador> ImpuestoPorZonaComprador { get; set; }
        [InverseProperty("Impuesto")]
        public virtual ICollection<ImpuestoPorZonaVendedor> ImpuestoPorZonaVendedor { get; set; }
    }
}